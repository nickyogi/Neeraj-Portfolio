{
  "version": 3,
  "sources": ["../../tiny-invariant/dist/esm/tiny-invariant.js", "../../@agney/react-loading/src/LoaderContext.tsx", "../../@agney/react-loading/src/useLoading.tsx"],
  "sourcesContent": ["var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n", "import React, { createContext, ReactElement, ReactNode, useContext, useMemo } from 'react';\n\ninterface ContextProps {\n  indicator: ReactElement | null;\n}\n\ninterface ProviderProps extends ContextProps {\n  children: ReactNode;\n}\n\nconst defaultValue = {\n  indicator: null,\n};\n\nconst LoaderContext = createContext<ContextProps>(defaultValue);\nexport const useLoaderContext = () => useContext(LoaderContext);\n\nexport const LoaderProvider = ({ indicator, children }: ProviderProps) => {\n  const value = useMemo(\n    () => ({\n      indicator: indicator,\n    }),\n    [indicator]\n  );\n\n  return (\n    <LoaderContext.Provider value={value}>{children}</LoaderContext.Provider>\n  );\n};\n", "import { cloneElement, ReactElement, isValidElement } from 'react';\nimport invariant from 'tiny-invariant';\n\nimport { useLoaderContext } from './LoaderContext';\n\ninterface Props {\n  loading?: boolean;\n  indicator?: ReactElement | null;\n  loaderProps?: {\n    /** Description of progressbar and what it is loading */\n    valueText?: string;\n  }\n}\n\ntype AriaLive = 'off' | 'assertive' | 'polite' | undefined;\n\n/**\n * Hook returning Indicator element according to loading argument.\n * @example const { containerProps, indicatorEl } = useLoading({ loading: true })\n */\nexport function useLoading({ loading = false, indicator, loaderProps = {} }: Props) {\n  const containerProps = {\n    'aria-busy': loading,\n    'aria-live': 'polite' as AriaLive,\n  };\n\n  const loaderContext = useLoaderContext();\n  const indicatorEl = indicator ?? loaderContext?.indicator;\n  invariant(isValidElement(indicatorEl), 'Expected a valid React element as indicator');\n\n  const accessibleLoaderProps = (() => {\n    const { valueText, ...rest } = loaderProps;\n    return {\n      role: 'progressbar',\n      'aria-valuetext': valueText,\n      ...rest,\n    }\n  })();\n  const accessibleIndicator = indicatorEl ? cloneElement(indicatorEl, accessibleLoaderProps) : null;\n\n  return {\n    containerProps,\n    indicatorEl: loading ? accessibleIndicator : null,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA,IAAI,eAAe;AACnB,IAAI,SAAS;AACb,SAAS,UAAU,WAAW,SAAS;AACnC,MAAI,WAAW;AACX;AAAA,EACJ;AACA,MAAI,cAAc;AACd,UAAM,IAAI,MAAM,MAAM;AAAA,EAC1B;AACA,MAAI,WAAW,OAAO,YAAY,aAAa,QAAQ,IAAI;AAC3D,MAAI,QAAQ,WAAW,GAAG,OAAO,QAAQ,IAAI,EAAE,OAAO,QAAQ,IAAI;AAClE,QAAM,IAAI,MAAM,KAAK;AACzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA,IAAMA,eAAe;EACnBC,WAAW;AADQ;AAIrB,IAAMC,oBAAgBC,4BAA4BH,YAAf;AAC5B,IAAMI,mBAAmB,SAAnBA,oBAAmB;AAAA,aAAMC,yBAAWH,aAAD;AAAhB;IAEnBI,iBAAiB,SAAjBA,gBAAiBC,QAAA;MAAGN,YAAAA,OAAAA,WAAWO,WAAAA,OAAAA;AAC1C,MAAMC,YAAQC,sBACZ,WAAA;AAAA,WAAO;MACLT;IADK;EAAP,GAGA,CAACA,SAAD,CAJmB;AAOrB,SACEU,aAAAA,QAAAA,cAACT,cAAcU,UAAf;IAAwBH;KAAeD,QAAvC;AAEH;ACRD,SAAgBK,WAAAA,QAAAA;4BAAaC,SAAAA,UAAAA,iBAAAA,SAAU,QAAA,cAAOb,YAAAA,OAAAA,qCAAWc,aAAAA,cAAAA,qBAAAA,SAAc,CAAA,IAAA;AACrE,MAAMC,iBAAiB;IACrB,aAAaF;IACb,aAAa;EAFQ;AAKvB,MAAMG,gBAAgBb,iBAAgB;AACtC,MAAMc,cAAcjB,aAAH,OAAGA,YAAagB,iBAAhB,OAAA,SAAgBA,cAAehB;AAChD,OAAUkB,6BAAeD,WAAD,IAAxB,OAAAE,UAAS,OAA8B,6CAA9B,IAATA,UAAS,KAAA,IAAT;AAEA,MAAMC,wBAAyB,WAAA;QACrBC,YAAuBP,YAAvBO,WAAcC,OAAAA,8BAASR,aAAAA,CAAAA,WAAAA,CAAAA;AAC/B,WAAA,SAAA;MACES,MAAM;MACN,kBAAkBF;IAFpB,GAGKC,IAHL;EAKD,EAP6B;AAQ9B,MAAME,sBAAsBP,kBAAcQ,2BAAaR,aAAaG,qBAAd,IAAuC;AAE7F,SAAO;IACLL;IACAE,aAAaJ,UAAUW,sBAAsB;EAFxC;AAIR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "names": ["defaultValue", "indicator", "LoaderContext", "createContext", "useLoaderContext", "useContext", "LoaderProvider", "_ref", "children", "value", "useMemo", "React", "Provider", "useLoading", "loading", "loaderProps", "containerProps", "loaderContext", "indicatorEl", "isValidElement", "invariant", "accessibleLoaderProps", "valueText", "rest", "role", "accessibleIndicator", "cloneElement"]
}
